1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "alderaan.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "alderaan.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "alderaan.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "alderaan.selectorLabels" . }},app.kubernetes.io/component=api" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Application endpoints:
   - Health Check: /health
   - Metrics: /metrics
   - API Documentation: /swagger/index.html

3. Monitor your application:
   kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "alderaan.selectorLabels" . }}"
   kubectl logs --namespace {{ .Release.Namespace }} -l "{{ include "alderaan.selectorLabels" . }}"

{{- if .Values.postgresql.enabled }}
4. Database Connection:
   To connect to your PostgreSQL database:

   kubectl run {{ include "alderaan.fullname" . }}-postgresql-client --rm --tty -i --restart='Never' --namespace {{ .Release.Namespace }} --image docker.io/bitnami/postgresql:16 --env="PGPASSWORD={{ .Values.postgresql.auth.password }}" --command -- psql --host {{ include "alderaan.fullname" . }}-postgresql --port 5432 -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }}
{{- end }}

5. Scaling your application:
{{- if .Values.autoscaling.enabled }}
   HPA is enabled. The application will automatically scale between {{ .Values.autoscaling.minReplicas }} and {{ .Values.autoscaling.maxReplicas }} replicas based on CPU utilization.
{{- else }}
   To scale manually:
   kubectl scale --replicas=<NUMBER> deployment/{{ include "alderaan.fullname" . }} --namespace {{ .Release.Namespace }}
{{- end }}

6. Check application status:
   kubectl get all --namespace {{ .Release.Namespace }} -l "{{ include "alderaan.selectorLabels" . }}"
